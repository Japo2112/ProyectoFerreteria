-- =========================================
-- PROYECTO: SISTEMA DE MATERIALES DE CONSTRUCCIÓN
-- AUTOR: Jared Piche (alm33)
-- REVISIÓN: Script corregido con atomicidad y auditoría funcional.
-- =========================================

-- (1) -- ELIMINAR TABLAS PREVIAS (solo para reiniciar en entorno de test)
BEGIN
  FOR t IN (SELECT table_name FROM user_tables WHERE table_name NOT LIKE 'BIN$%') LOOP
    BEGIN
      EXECUTE IMMEDIATE 'DROP TABLE ' || t.table_name || ' CASCADE CONSTRAINTS';
    EXCEPTION WHEN OTHERS THEN NULL;
    END;
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN NULL;
END;
/
-- Nota: en producción NO ejecutar la limpieza automática.

-- =============================
-- TABLAS (CON IDENTITY)
-- =============================
-- (Las tablas estaban perfectas, se dejan idénticas)

CREATE TABLE SUCURSAL (
  id_sucursal      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre           VARCHAR2(100) NOT NULL,
  direccion        VARCHAR2(200),
  region           VARCHAR2(50)
);

CREATE TABLE ROLES_APLICACION (
  rol_app_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_rol       VARCHAR2(50) NOT NULL,
  descripcion      VARCHAR2(200)
);

CREATE TABLE CLIENTE (
  id_cliente       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre           VARCHAR2(150) NOT NULL,
  nit              VARCHAR2(20) UNIQUE,
  direccion        VARCHAR2(200),
  telefono         VARCHAR2(30),
  email            VARCHAR2(100),
  tipo_cliente     VARCHAR2(20) DEFAULT 'Contado' CHECK (tipo_cliente IN ('Contado','Credito')),
  limite_credito   NUMBER(12,2) DEFAULT 0,
  sucursal_id      NUMBER,
  CONSTRAINT fk_cliente_sucursal FOREIGN KEY (sucursal_id) REFERENCES SUCURSAL(id_sucursal)
);

CREATE TABLE VENDEDOR (
  id_vendedor      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre           VARCHAR2(120) NOT NULL,
  area             VARCHAR2(50),
  telefono         VARCHAR2(30),
  email            VARCHAR2(100)
);

CREATE TABLE CATEGORIA (
  id_categoria     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre           VARCHAR2(100) NOT NULL,
  descripcion      VARCHAR2(200)
);

CREATE TABLE PRODUCTO (
  id_producto      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre           VARCHAR2(150) NOT NULL,
  categoria_id     NUMBER,
  precio_unitario  NUMBER(14,2) NOT NULL,
  unidad_medida    VARCHAR2(20),
  estado           VARCHAR2(20) DEFAULT 'Activo' CHECK (estado IN ('Activo','Inactivo')),
  CONSTRAINT fk_producto_categoria FOREIGN KEY (categoria_id) REFERENCES CATEGORIA(id_categoria)
);

CREATE TABLE EXISTENCIAS_SUCURSAL (
  producto_id      NUMBER NOT NULL,
  sucursal_id      NUMBER NOT NULL,
  cantidad_stock   NUMBER(14,2) DEFAULT 0,
  stock_minimo     NUMBER(14,2) DEFAULT 0,
  CONSTRAINT pk_existencias PRIMARY KEY (producto_id, sucursal_id),
  CONSTRAINT fk_existencias_producto FOREIGN KEY (producto_id) REFERENCES PRODUCTO(id_producto),
  CONSTRAINT fk_existencias_sucursal FOREIGN KEY (sucursal_id) REFERENCES SUCURSAL(id_sucursal)
);

CREATE TABLE FORMA_PAGO (
  id_forma_pago    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  tipo             VARCHAR2(40) NOT NULL
);

CREATE TABLE FACTURA (
  id_factura       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  numero_factura   VARCHAR2(30) UNIQUE NOT NULL,
  fecha            DATE DEFAULT SYSDATE,
  cliente_id       NUMBER,
  vendedor_id      NUMBER,
  sucursal_id      NUMBER,
  tipo_pago_id     NUMBER,
  total            NUMBER(14,2) DEFAULT 0,
  saldo_pendiente  NUMBER(14,2) DEFAULT 0,
  estado           VARCHAR2(20) DEFAULT 'Emitida' CHECK (estado IN ('Emitida','Parcial','Pagada','Credito')) ,
  CONSTRAINT fk_factura_cliente FOREIGN KEY (cliente_id) REFERENCES CLIENTE(id_cliente),
  CONSTRAINT fk_factura_vendedor FOREIGN KEY (vendedor_id) REFERENCES VENDEDOR(id_vendedor),
  CONSTRAINT fk_factura_sucursal FOREIGN KEY (sucursal_id) REFERENCES SUCURSAL(id_sucursal),
  CONSTRAINT fk_factura_forma FOREIGN KEY (tipo_pago_id) REFERENCES FORMA_PAGO(id_forma_pago)
);

CREATE TABLE FACTURA_DETALLE (
  id_factura_detalle NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  factura_id         NUMBER NOT NULL,
  producto_id        NUMBER NOT NULL,
  cantidad           NUMBER(14,2) NOT NULL,
  precio_unitario    NUMBER(14,2) NOT NULL,
  subtotal           NUMBER(14,2) NOT NULL,
  sucursal_origen_id NUMBER NOT NULL, 
  CONSTRAINT fk_fd_factura FOREIGN KEY (factura_id) REFERENCES FACTURA(id_factura) ON DELETE CASCADE,
  CONSTRAINT fk_fd_producto FOREIGN KEY (producto_id) REFERENCES PRODUCTO(id_producto),
  CONSTRAINT fk_fd_sucursal_origen FOREIGN KEY (sucursal_origen_id) REFERENCES SUCURSAL(id_sucursal)
);

CREATE TABLE NOTA_CREDITO (
  id_nota_credito  NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  factura_id       NUMBER NOT NULL,
  fecha            DATE DEFAULT SYSDATE,
  motivo           VARCHAR2(300),
  total_monto      NUMBER(14,2) DEFAULT 0,
  usuario_id       NUMBER,
  CONSTRAINT fk_nc_factura FOREIGN KEY (factura_id) REFERENCES FACTURA(id_factura)
);

CREATE TABLE NOTA_CREDITO_DETALLE (
  id_nc_detalle    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nota_id          NUMBER NOT NULL,
  producto_id      NUMBER NOT NULL,
  cantidad_devuelta NUMBER(14,2) NOT NULL,
  precio_devolucion NUMBER(14,2) NOT NULL,
  sucursal_devolucion_id NUMBER NOT NULL, 
  CONSTRAINT fk_ncd_nota FOREIGN KEY (nota_id) REFERENCES NOTA_CREDITO(id_nota_credito) ON DELETE CASCADE,
  CONSTRAINT fk_ncd_producto FOREIGN KEY (producto_id) REFERENCES PRODUCTO(id_producto),
  CONSTRAINT fk_ncd_sucursal FOREIGN KEY (sucursal_devolucion_id) REFERENCES SUCURSAL(id_sucursal)
);

CREATE TABLE PROVEEDOR (
  id_proveedor     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre           VARCHAR2(150) NOT NULL,
  nit              VARCHAR2(30),
  contacto         VARCHAR2(120),
  telefono         VARCHAR2(30),
  email            VARCHAR2(100),
  direccion        VARCHAR2(200)
);

CREATE TABLE COMPRA (
  id_compra        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  proveedor_id     NUMBER,
  fecha            DATE DEFAULT SYSDATE,
  total            NUMBER(14,2) DEFAULT 0,
  saldo_pendiente  NUMBER(14,2) DEFAULT 0,
  estado           VARCHAR2(20) DEFAULT 'Pendiente' CHECK (estado IN ('Pendiente','Parcial','Pagada')) ,
  CONSTRAINT fk_compra_proveedor FOREIGN KEY (proveedor_id) REFERENCES PROVEEDOR(id_proveedor)
);

CREATE TABLE COMPRA_DETALLE (
  id_compra_detalle NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  compra_id         NUMBER NOT NULL,
  producto_id       NUMBER NOT NULL,
  cantidad          NUMBER(14,2) NOT NULL,
  costo_unitario    NUMBER(14,2) NOT NULL,
  sucursal_destino_id NUMBER NOT NULL, 
  CONSTRAINT fk_cd_compra FOREIGN KEY (compra_id) REFERENCES COMPRA(id_compra) ON DELETE CASCADE,
  CONSTRAINT fk_cd_producto FOREIGN KEY (producto_id) REFERENCES PRODUCTO(id_producto),
  CONSTRAINT fk_cd_sucursal_destino FOREIGN KEY (sucursal_destino_id) REFERENCES SUCURSAL(id_sucursal)
);

CREATE TABLE VEHICULO (
  id_vehiculo      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  marca            VARCHAR2(80),
  modelo           VARCHAR2(80),
  placa            VARCHAR2(30),
  tipo_placa       VARCHAR2(30)
);

CREATE TABLE PILOTO (
  id_piloto        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre           VARCHAR2(120),
  licencia         VARCHAR2(80),
  telefono         VARCHAR2(30)
);

CREATE TABLE TRANSPORTE (
  id_envio         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  factura_id       NUMBER,
  vehiculo_id      NUMBER,
  piloto_id        NUMBER,
  fecha_envio      DATE,
  fecha_entrega    DATE,
  estado_envio     VARCHAR2(20) DEFAULT 'Pendiente' CHECK (estado_envio IN ('Pendiente','En Ruta','Entregado')) ,
  descripcion_carga VARCHAR2(300),
  CONSTRAINT fk_transp_factura FOREIGN KEY (factura_id) REFERENCES FACTURA(id_factura),
  CONSTRAINT fk_transp_vehiculo FOREIGN KEY (vehiculo_id) REFERENCES VEHICULO(id_vehiculo),
  CONSTRAINT fk_transp_piloto FOREIGN KEY (piloto_id) REFERENCES PILOTO(id_piloto)
);

CREATE TABLE USUARIO (
  id_usuario       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre           VARCHAR2(120) NOT NULL,
  username         VARCHAR2(80) UNIQUE NOT NULL,
  password_hash    VARCHAR2(300) NOT NULL,
  activo           CHAR(1) DEFAULT 'S' CHECK (activo IN ('S','N')),
  rol_app_id       NUMBER, 
  last_login       TIMESTAMP,
  CONSTRAINT fk_usuario_rol FOREIGN KEY (rol_app_id) REFERENCES ROLES_APLICACION(rol_app_id)
);

CREATE TABLE AUDITORIA_GENERAL (
  id_auditoria     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  usuario_id       NUMBER,
  accion           VARCHAR2(20), 
  tabla_afectada   VARCHAR2(100),
  pk_afectada      VARCHAR2(200),
  fecha_hora       TIMESTAMP DEFAULT SYSTIMESTAMP,
  datos_viejos     CLOB,
  datos_nuevos     CLOB,
  detalle          VARCHAR2(1000),
  CONSTRAINT fk_aud_usuario FOREIGN KEY (usuario_id) REFERENCES USUARIO(id_usuario)
);

CREATE TABLE PAGOS_VENTAS (
  pago_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  factura_id       NUMBER NOT NULL,
  monto_pagado     NUMBER(14,2) NOT NULL,
  fecha_pago       DATE DEFAULT SYSDATE,
  medio_pago       VARCHAR2(50),
  referencia       VARCHAR2(100),
  CONSTRAINT fk_pv_factura FOREIGN KEY (factura_id) REFERENCES FACTURA(id_factura)
);

CREATE TABLE PAGOS_COMPRAS (
  pago_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  compra_id        NUMBER NOT NULL,
  monto_pagado     NUMBER(14,2) NOT NULL,
  fecha_pago       DATE DEFAULT SYSDATE,
  medio_pago       VARCHAR2(50),
  referencia       VARCHAR2(100),
  CONSTRAINT fk_pc_compra FOREIGN KEY (compra_id) REFERENCES COMPRA(id_compra)
);

-- =============================
-- DATOS MAESTROS INICIALES
-- =============================
INSERT INTO FORMA_PAGO (tipo) VALUES ('Efectivo');
INSERT INTO FORMA_PAGO (tipo) VALUES ('Tarjeta');
INSERT INTO FORMA_PAGO (tipo) VALUES ('Transferencia');
INSERT INTO FORMA_PAGO (tipo) VALUES ('Cheque');

INSERT INTO ROLES_APLICACION (nombre_rol, descripcion) VALUES ('ADMIN', 'Administrador total del sistema');
INSERT INTO ROLES_APLICACION (nombre_rol, descripcion) VALUES ('VENDEDOR', 'Usuario que realiza ventas');
INSERT INTO ROLES_APLICACION (nombre_rol, descripcion) VALUES ('BODEGUERO', 'Encargado de inventario/almacen');
INSERT INTO ROLES_APLICACION (nombre_rol, descripcion) VALUES ('CONTADOR', 'Usuario contabilidad/tesoreria');

COMMIT;
/

-- =============================
-- TRIGGERS CORREGIDOS
-- =============================

-- (A) Trigger para disminuir stock (Venta)
-- CORREGIDO: Se usa MERGE para consistencia y se elimina el EXCEPTION
CREATE OR REPLACE TRIGGER trg_fd_after_insert
AFTER INSERT ON FACTURA_DETALLE
FOR EACH ROW
BEGIN
  MERGE INTO EXISTENCIAS_SUCURSAL es
  USING (SELECT :NEW.producto_id pid, :NEW.sucursal_origen_id sid FROM dual) src
  ON (es.producto_id = src.pid AND es.sucursal_id = src.sid)
  WHEN MATCHED THEN
    UPDATE SET es.cantidad_stock = NVL(es.cantidad_stock, 0) - :NEW.cantidad
  WHEN NOT MATCHED THEN
    INSERT (producto_id, sucursal_id, cantidad_stock)
    VALUES (:NEW.producto_id, :NEW.sucursal_origen_id, -(:NEW.cantidad));

  -- CORREGIDO: Se captura el usuario_id de la sesión
  INSERT INTO AUDITORIA_GENERAL(usuario_id, accion, tabla_afectada, pk_afectada, detalle, datos_nuevos)
  VALUES(TO_NUMBER(SYS_CONTEXT('USER_SESSION', 'CLIENT_INFO')),'UPDATE','EXISTENCIAS_SUCURSAL',
         'P:'||:NEW.producto_id||';S:'||:NEW.sucursal_origen_id,
         'Disminuye stock por venta. Cantidad: '||:NEW.cantidad,
         TO_CLOB('Stock ajustado - producto '||:NEW.producto_id));
-- CORREGIDO: Se eliminó el EXCEPTION WHEN OTHERS THEN NULL para forzar atomicidad
END;
/

-- (B) Trigger para aumentar stock (Compra)
-- CORREGIDO: Se captura usuario_id y se elimina EXCEPTION
CREATE OR REPLACE TRIGGER trg_cd_after_insert
AFTER INSERT ON COMPRA_DETALLE
FOR EACH ROW
BEGIN
  MERGE INTO EXISTENCIAS_SUCURSAL es
  USING (SELECT :NEW.producto_id pid, :NEW.sucursal_destino_id sid FROM dual) src
  ON (es.producto_id = src.pid AND es.sucursal_id = src.sid)
  WHEN MATCHED THEN
    UPDATE SET es.cantidad_stock = NVL(es.cantidad_stock,0) + :NEW.cantidad
  WHEN NOT MATCHED THEN
    INSERT (producto_id, sucursal_id, cantidad_stock)
    VALUES (:NEW.producto_id, :NEW.sucursal_destino_id, :NEW.cantidad);

  -- CORREGIDO: Se captura el usuario_id de la sesión
  INSERT INTO AUDITORIA_GENERAL(usuario_id, accion, tabla_afectada, pk_afectada, detalle, datos_nuevos)
  VALUES(TO_NUMBER(SYS_CONTEXT('USER_SESSION', 'CLIENT_INFO')),'UPDATE','EXISTENCIAS_SUCURSAL',
         'P:'||:NEW.producto_id||';S:'||:NEW.sucursal_destino_id,
         'Aumenta stock por compra. Cantidad: '||:NEW.cantidad,
         TO_CLOB('Stock ajustado - producto '||:NEW.producto_id));
-- CORREGIDO: Se eliminó el EXCEPTION WHEN OTHERS THEN NULL
END;
/

-- (C) Trigger para devolver stock (Nota de Crédito)
-- CORREGIDO: Se captura usuario_id y se elimina EXCEPTION
CREATE OR REPLACE TRIGGER trg_ncd_after_insert
AFTER INSERT ON NOTA_CREDITO_DETALLE
FOR EACH ROW
BEGIN
  MERGE INTO EXISTENCIAS_SUCURSAL es
  USING (SELECT :NEW.producto_id pid, :NEW.sucursal_devolucion_id sid FROM dual) src
  ON (es.producto_id = src.pid AND es.sucursal_id = src.sid)
  WHEN MATCHED THEN
    UPDATE SET es.cantidad_stock = NVL(es.cantidad_stock,0) + :NEW.cantidad_devuelta
  WHEN NOT MATCHED THEN
    INSERT (producto_id, sucursal_id, cantidad_stock)
    VALUES (:NEW.producto_id, :NEW.sucursal_devolucion_id, :NEW.cantidad_devuelta);

  -- CORREGIDO: Se captura el usuario_id de la sesión
  INSERT INTO AUDITORIA_GENERAL(usuario_id, accion, tabla_afectada, pk_afectada, detalle, datos_nuevos)
  VALUES(TO_NUMBER(SYS_CONTEXT('USER_SESSION', 'CLIENT_INFO')),'UPDATE','EXISTENCIAS_SUCURSAL',
         'P:'||:NEW.producto_id||';S:'||:NEW.sucursal_devolucion_id,
         'Aumenta stock por nota de crédito. Cantidad: '||:NEW.cantidad_devuelta,
         TO_CLOB('Stock ajustado - producto '||:NEW.producto_id));
-- CORREGIDO: Se eliminó el EXCEPTION WHEN OTHERS THEN NULL
END;
/

-- (D) Trigger para actualizar saldo (Pago Venta)
-- CORREGIDO: Se captura usuario_id y se elimina EXCEPTION
CREATE OR REPLACE TRIGGER trg_pv_after_insert
AFTER INSERT ON PAGOS_VENTAS
FOR EACH ROW
BEGIN
  UPDATE FACTURA
  SET saldo_pendiente = NVL(saldo_pendiente,0) - :NEW.monto_pagado
  WHERE id_factura = :NEW.factura_id;

  UPDATE FACTURA
  SET estado = CASE
    WHEN NVL(saldo_pendiente,0) <= 0 THEN 'Pagada'
    WHEN NVL(saldo_pendiente,0) < total THEN 'Parcial'
    ELSE estado
  END
  WHERE id_factura = :NEW.factura_id;

  -- CORREGIDO: Se captura el usuario_id de la sesión
  INSERT INTO AUDITORIA_GENERAL(usuario_id, accion, tabla_afectada, pk_afectada, detalle)
  VALUES(TO_NUMBER(SYS_CONTEXT('USER_SESSION', 'CLIENT_INFO')),'UPDATE','FACTURA','F:'||:NEW.factura_id,'Pago registrado: '||:NEW.monto_pagado);
-- CORREGIDO: Se eliminó el EXCEPTION WHEN OTHERS THEN NULL
END;
/

-- (E) Trigger para actualizar saldo (Pago Compra)
-- CORREGIDO: Se captura usuario_id y se elimina EXCEPTION
CREATE OR REPLACE TRIGGER trg_pc_after_insert
AFTER INSERT ON PAGOS_COMPRAS
FOR EACH ROW
BEGIN
  UPDATE COMPRA
  SET saldo_pendiente = NVL(saldo_pendiente,0) - :NEW.monto_pagado
  WHERE id_compra = :NEW.compra_id;

  UPDATE COMPRA
  SET estado = CASE
    WHEN NVL(saldo_pendiente,0) <= 0 THEN 'Pagada'
    WHEN NVL(saldo_pendiente,0) < total THEN 'Parcial'
    ELSE estado
  END
  WHERE id_compra = :NEW.compra_id;

  -- CORREGIDO: Se captura el usuario_id de la sesión y se corrigió 'pk_afecatada'
  INSERT INTO AUDITORIA_GENERAL(usuario_id, accion, tabla_afectada, pk_afectada, detalle)
  VALUES(TO_NUMBER(SYS_CONTEXT('USER_SESSION', 'CLIENT_INFO')),'UPDATE','COMPRA','C:'||:NEW.compra_id,'Pago compra registrado: '||:NEW.monto_pagado);
-- CORREGIDO: Se eliminó el EXCEPTION WHEN OTHERS THEN NULL
END;
/

-- (F) Trigger genérico de auditoría para FACTURA
-- CORREGIDO: Se captura usuario_id y se elimina EXCEPTION
CREATE OR REPLACE TRIGGER trg_auditoria_factura
AFTER INSERT OR UPDATE OR DELETE ON FACTURA
FOR EACH ROW
DECLARE
  v_old CLOB;
  v_new CLOB;
  -- CORREGIDO: Se captura el usuario_id en una variable
  v_usuario_id NUMBER := TO_NUMBER(SYS_CONTEXT('USER_SESSION', 'CLIENT_INFO'));
BEGIN
  IF INSERTING THEN
    v_old := NULL;
    v_new := 'NUM:'||:NEW.numero_factura||',TOTAL:'||TO_CHAR(:NEW.total);
    INSERT INTO AUDITORIA_GENERAL(usuario_id, accion, tabla_afectada, pk_afectada, datos_viejos, datos_nuevos, detalle)
    VALUES(v_usuario_id,'INSERT','FACTURA','F:'||:NEW.id_factura,NULL, v_new, 'Insert factura');
  ELSIF UPDATING THEN
    v_old := 'NUM:'||:OLD.numero_factura||',TOTAL:'||TO_CHAR(:OLD.total);
    v_new := 'NUM:'||:NEW.numero_factura||',TOTAL:'||TO_CHAR(:NEW.total);
    INSERT INTO AUDITORIA_GENERAL(usuario_id, accion, tabla_afectada, pk_afectada, datos_viejos, datos_nuevos, detalle)
    VALUES(v_usuario_id,'UPDATE','FACTURA','F:'||:NEW.id_factura, v_old, v_new, 'Update factura');
  ELSIF DELETING THEN
    v_old := 'NUM:'||:OLD.numero_factura||',TOTAL:'||TO_CHAR(:OLD.total);
    INSERT INTO AUDITORIA_GENERAL(usuario_id, accion, tabla_afectada, pk_afectada, datos_viejos, datos_nuevos, detalle)
    VALUES(v_usuario_id,'DELETE','FACTURA','F:'||:OLD.id_factura, v_old, NULL, 'Delete factura');
  END IF;
-- CORREGIDO: Se eliminó el EXCEPTION WHEN OTHERS THEN NULL
END;
/

COMMIT;
/

-- Ejecuta esto para crear tu primer usuario
BEGIN
  PKG_SEGURIDAD.PR_CREAR_USUARIO(
    p_nombre       => 'Administrador del Sistema',
    p_username     => 'admin',
    p_clave_sin_hash => 'admin123', -- La clave que quieras
    p_rol_app_id   => 1             -- Asumiendo que 1 es el ID del rol 'ADMIN'
  );
END;
/

select * from Usuario;